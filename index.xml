<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rentseen&#39;s Blog</title>
    <link>http://yelinsheng.top/</link>
    <description>Recent content on Rentseen&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright &amp;copy; 叶林生 2016.</copyright>
    <lastBuildDate>Sun, 22 Oct 2017 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://yelinsheng.top/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>leetcode: Question 714</title>
      <link>http://yelinsheng.top/post/leetcode-714/</link>
      <pubDate>Sun, 22 Oct 2017 00:00:00 +0000</pubDate>
      
      <guid>http://yelinsheng.top/post/leetcode-714/</guid>
      <description>714. Best Time to Buy and Sell Stock with Transaction Fee 题目 Your are given an array of integers prices, for which the i-th element is the price of a given stock on day i; and a non-negative integer fee representing a transaction fee.
You may complete as many transactions as you like, but you need to pay the transaction fee for each transaction. You may not buy more than 1 share of a stock at a time (ie.</description>
    </item>
    
    <item>
      <title>高级数据库课程复习</title>
      <link>http://yelinsheng.top/post/advanced-database-review/</link>
      <pubDate>Fri, 30 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://yelinsheng.top/post/advanced-database-review/</guid>
      <description>数据库复习 第14章 事务 事务：原子性，隔离线（并发控制系统），持久性，一致性
存储结构：易失型，非易失型，稳定型
事务的状态：活动，部分提交，失败，中止，提交
原子性，持久性：系统遇到故障时可能无法保证原子性和持久性。日志可以提供恢复机制。回滚。
事务隔离性：并发执行，由并发控制来保证，以防止系统产生不一致性
可串行化：
非冲突指令：可以调换顺序的两个指令（操作不同数据+读同一个数据）
冲突等价：可以通过一系列非冲突指令变换获得的调度
冲突可串行化：冲突等价于一个串行化调度
多个事务：拓扑排序中没有环即可。
不是冲突等价的也有可能调度等价。
可恢复调度: 读取了其他事务数据的事务应之后提交
无级联调度: 被读事务在读操作前提交
事务隔离性级别: 可串行化，可重复读，已提交读，未提交读
隔离线级别的实现: 锁/时间戳/多版本
第15章 并发控制 锁: 共享、排他
死锁: 需要回滚
饿死: 排他锁可能一直无法成功申请到锁。解决方法：如果之前有等待的事务，则不能授予锁。
两阶段封锁协议: 增长阶段；缩减阶段。
两阶段封锁协议可以保证冲突可串行化，但可能会发生死锁，可能会级联回滚。
级联回滚可以通过严格两阶段封锁协议来避免。
具有锁转换的两阶段封锁协议: 在增长阶段可以升级锁，在缩减阶段可以降级锁
死锁处理: 两个途径:死锁预防；运行系统进入死锁，然后进行死锁检测和恢复。
死锁预防: 对加锁请求进行排序或一次获得所有锁；抢占和事务回滚:wait-die,wound-wait。
死锁检测与恢复:
死锁检测：检测等待图中是否有环。何时激活死锁检测算法？
死锁恢复：选择牺牲者-&amp;gt;回滚。需要避免某些事务频繁被回滚导致饿死。
多粒度: 节点树，意向锁
基于时间戳的协议: 事先选定事务的次序，基于时间戳的则以时间戳为次序
时间戳: 可以用系统时钟，也可以用逻辑计数器。
TS(T):事务的时间戳
W-timestamp(Q):数据Q的写操作的最大时间戳
R-timestamp(Q):数据Q的读操作的最大时间戳
时间戳排序协议
时间戳排序协议保证冲突可串行化，保证无死锁，可能会饿死，可能产生不可恢复的调度（可通过几个方法来解决）
Thomas写规则: 过时的write操作将被忽略
基于有效性检查的协议: 读阶段，有效性检查阶段，写阶段
多版本机制: 记录每个版本的值
第16章 恢复系统 恢复与原子性:
日志记录: 更新日志记录  等
数据库修改: 延迟修改，立即修改，undo，redo</description>
    </item>
    
    <item>
      <title>Machine Learning: Week 2</title>
      <link>http://yelinsheng.top/post/machine-learning-week2/</link>
      <pubDate>Tue, 06 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://yelinsheng.top/post/machine-learning-week2/</guid>
      <description>Machine Learning: Week 2 Multivariate linear regression Linear regression with multiple variables is also known as &amp;ldquo;multivariate linear regression&amp;rdquo;.
Notation Hypothesis Gradient descent Formula:
Partial derivation will be like this:
Feature scaling If scale of features differ widely, it may take long time to converge. So it is necessary to scale the feature.
The contour will look like a circle after scaling.
Problem: Is converge result which is scaled the same as converge result which is not scaled.</description>
    </item>
    
    <item>
      <title>Vim 的使用与学习</title>
      <link>http://yelinsheng.top/post/vim/</link>
      <pubDate>Tue, 06 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://yelinsheng.top/post/vim/</guid>
      <description>Vim 的使用与学习 据说大神都在用Vim，为了把右手从鼠标上解放出来，我也来入这个坑把。。。
网站资源 openvim
shortcut hjkl:左下上右 dd:删除一行 J:合并一行 x:删除一个字符 i:在光标前插入 a:在光标后插入 A:在行末尾插入 u:undo U:将一行恢复原样 ctrl+r:redo O:在上方插入一行 o:在下方插入一行 number:在指令前加数字，可以执行多次 ZZ:保存并退出 :q!:不保存退出 dw:删除一个word d$:从光标处删除到行尾 de:删除到当前单词的end 0:移动到开头 $:移动到行尾 2w:移动2个word到开头 2e：移动两个word到end d2w:删除两个word 2dd:删除两行 r+字母:替换当前光标的字母 ce:change until the end word c+number+motion:与d类似 gg:移动到文档开头 G:移动到文档末尾 number+G:移动到第number行 /word:搜索，正向 ?word:搜索，反向 n:搜索时下一个命中项 N:搜索时上一个命中项 ctrl+o:到光标上一个位置 %:找到与当前光标匹配的),],} :s/old/new:将当前行的第一个old替换成new :s/old/new/g:将当前行所有的old替换成new :%s/old/new/gc:替换文件所有的匹配项，在替换每一个匹配项之前会询问用户 :%s/old/new/g:替换文件所有的匹配项 :#,#/old/new/g:替换#之间的行的所有匹配项 :!command:可以执行命令行的命令 :w filename:另存为 v:可以高亮选择文本 :r filename: 把filename的内容粘贴过来 R:进入replace模式，替换多个字符 y：yank 复制 p:put 粘贴/将删除的放在光标之后</description>
    </item>
    
    <item>
      <title>Unity 3d 学习、体验</title>
      <link>http://yelinsheng.top/post/unity-3d/</link>
      <pubDate>Mon, 05 Dec 2016 00:00:00 +0000</pubDate>
      
      <guid>http://yelinsheng.top/post/unity-3d/</guid>
      <description> 游戏引擎：unity-3d 的初次学习以及体验 unity-3d 是由Unity Technologies开发的专业游戏引擎
安装： 支持mac和windows这两个平台，我使用的是windows，直接选择免费版的下载安装即可，在安装时需要登录并填写一个调查问卷（不知道是干嘛的==）。
使用： 我是学习了一下官网上的教程，做的是第一个案例：Roll a ball.（没做完- -）
官网上的视频讲的很清楚，每一步的操作都解释的很明白，它的视频用的是youtube提供的接口（youtube的字幕太强大了，似乎是自动生成的，用了机器学习神马的，很精准）
细节记录：  元件都是包含在一个scene中的 camera元件：视角 光线元件，可以投射到地面上 plane，一个平面  总体感受：  界面功能很强大，3d效果超棒 图形是在软件上手动添加操作的 可以通过给图形元件绑定script代码来添加元件的逻辑，从而操作元件。 代码可以使用 c# 或 javascript 整个操作体验更像是设计和代码的结合（Dreamweaver？。。。）  </description>
    </item>
    
    <item>
      <title>Machine Learning: Week 1</title>
      <link>http://yelinsheng.top/post/mathine-learning-week1/</link>
      <pubDate>Wed, 30 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>http://yelinsheng.top/post/mathine-learning-week1/</guid>
      <description>Machine Learning: Week 1 Supervised learning Predict output according to the correct dataset which are already known.
Supervised learning problems are categorized into &amp;ldquo;regression&amp;rdquo; and &amp;ldquo;classification&amp;rdquo; problems
House price prediction This is a regression problem, whose prediction value is continuous.
Do regression according to history data, you can do linear regression or quadratic regression which is up to you.
Then do prediction using this result.
Breast cancer This is a classification problem, whose prediction value is discrete.</description>
    </item>
    
    <item>
      <title>hugo tips记录</title>
      <link>http://yelinsheng.top/post/hugo/</link>
      <pubDate>Fri, 11 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>http://yelinsheng.top/post/hugo/</guid>
      <description>编译的路径 layouts/indexes下的html文件会被编译到一个单独的路径中，作为索引
也可以用以下代码在config中强行指定索引文件
[indexes] tag = &amp;quot;tags&amp;quot; topic = &amp;quot;topics&amp;quot;  md渲染 默认是按_default下的single.html来渲染的
render模板指令 默认是从_default目录中寻找的</description>
    </item>
    
    <item>
      <title>叶林生</title>
      <link>http://yelinsheng.top/about/</link>
      <pubDate>Fri, 11 Nov 2016 00:00:00 +0000</pubDate>
      
      <guid>http://yelinsheng.top/about/</guid>
      <description>你好，我是叶林生，目前在上海交通大学计算机系攻读硕士学位。
Hello, I&amp;rsquo;m Rentseen. Now I&amp;rsquo;m studying in Shanghai Jiao Tong University for a master&amp;rsquo;s degree, and my major is Computer Science.</description>
    </item>
    
    <item>
      <title>htmlpy框架学习</title>
      <link>http://yelinsheng.top/post/htmlpy/</link>
      <pubDate>Tue, 11 Oct 2016 00:00:00 +0000</pubDate>
      
      <guid>http://yelinsheng.top/post/htmlpy/</guid>
      <description>Notes for htmlpy Installation Platform: Ubuntu 16.04 LTS
1) Installing python package manager: pip
sudo apt-get install python-pip  2) Installing htmlPy
pip install htmlPy  3) Installing PySide
sudo apt-get install python-pyside  4) Installing jinja2, which is depended by htmlPy.
sudo pip install jinja2  5) Installing PyQt4
sudo apt-get install python-qt4  A simple demo Assume that there is a file named &amp;ldquo;index.html&amp;rdquo; in the same path.</description>
    </item>
    
    <item>
      <title>c&#43;&#43; multithreading学习</title>
      <link>http://yelinsheng.top/post/cplusplus-multithread/</link>
      <pubDate>Thu, 01 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>http://yelinsheng.top/post/cplusplus-multithread/</guid>
      <description>c++ concurrency in action g++ compile g++ -std=c++11 launch-thread.cpp -o launch-thread -lpthread
basic thread management lanch a thread we can lanch a thread by passing a parameter which can be function, lamda expression and function call operator
#include&amp;lt;iostream&amp;gt; #include&amp;lt;thread&amp;gt; void helloWorld(){ std::cout&amp;lt;&amp;lt;&amp;quot;hello world from function&amp;quot;&amp;lt;&amp;lt;std::endl; } class hello{ public: void operator()(){ std::cout&amp;lt;&amp;lt;&amp;quot;hello world from function call operator&amp;quot;&amp;lt;&amp;lt;std::endl; } }; int main(){ std::thread testFunction(helloWorld); std::thread testLamda([]{ std::cout&amp;lt;&amp;lt;&amp;quot;hello world from lamda&amp;quot;&amp;lt;&amp;lt;std::endl; }); hello x; std::thread testCall(x); testFunction.</description>
    </item>
    
    <item>
      <title>c&#43;&#43;函数</title>
      <link>http://yelinsheng.top/post/cplusplus-functions/</link>
      <pubDate>Thu, 01 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>http://yelinsheng.top/post/cplusplus-functions/</guid>
      <description>函数用法 function call operator 在class中加入operator()使类具有函数的特征
#include&amp;lt;iostream&amp;gt; class mul{ public: mul(int x){ multiplier=x; } int operator()(int x) const { return x*multiplier; } private: int multiplier; }; int main(){ mul test(10); std::cout&amp;lt;&amp;lt;test(2)&amp;lt;&amp;lt;std::endl; }  lamda expression [传入的变量列表](函数参数){函数体}(调用);
在[ ]中声明需要使用的调用体的域中的本地变量，全局变量不需要声明。[=]表示所有的变量以赋值的形式传入，[&amp;amp;]表示所有的变量以引用的形式传入，[=,&amp;amp;j]表示除j外都以赋值传入，[i,&amp;amp;j]，表示i以赋值传入，j以引用传入
第一个()为参数列表
{}中是函数体
第二个()表示调用
#include&amp;lt;iostream&amp;gt; int main(){ int x=1; double y=1.2; bool z=false; [x,&amp;amp;y](int i){std::cout&amp;lt;&amp;lt;i+x+y&amp;lt;&amp;lt;std::endl;}(1); return 0; }  accumulate 累加, demo 如下所示，可使用vector的迭代器
#include &amp;lt;iostream&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;numeric&amp;gt; int main(){ int can[]={1,2,3,4}; int r=std::accumulate(can,can+4,0); std::cout&amp;lt;&amp;lt;r&amp;lt;&amp;lt;std::endl; return 0; }  distance 返回迭代器之间的距离，demo如下:</description>
    </item>
    
    <item>
      <title>linux bash学习</title>
      <link>http://yelinsheng.top/post/linux-bash/</link>
      <pubDate>Thu, 01 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>http://yelinsheng.top/post/linux-bash/</guid>
      <description>linux bash学习 chmod change mode, 改变文件的权限 详情可见博客
hello world demo 如下
#!/bin/bash #hello world a=&amp;quot;hello world&amp;quot; echo $a  if else 格式为
if [ ... ]; then ... elif [ ... ]; then ... else ... fi  demo如下
#!/bin/bash #test if else #-f ----&amp;gt; if is a file a=&amp;quot;if-else.sh&amp;quot; if [ -f $a ]; then echo &amp;quot;$a is a file&amp;quot; else echo &amp;quot;$a is not a file&amp;quot; fi #-lt ----&amp;gt; less than -le -&amp;gt; less equal b=4 if [ $b -lt 5 ]; then echo &amp;quot;$b is less than 5&amp;quot; else echo &amp;quot;$b is great or equal than 5&amp;quot; fi #-x ----&amp;gt; if is executable c=&amp;quot;if-else.</description>
    </item>
    
    <item>
      <title>mongodb学习</title>
      <link>http://yelinsheng.top/post/mogodb/</link>
      <pubDate>Thu, 01 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>http://yelinsheng.top/post/mogodb/</guid>
      <description>指令 show dbs 显示所有的数据库
db 显示当前数据库下的集合
use 数据库名 切换数据库</description>
    </item>
    
    <item>
      <title>算法复习</title>
      <link>http://yelinsheng.top/post/algorithm-review/</link>
      <pubDate>Thu, 01 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>http://yelinsheng.top/post/algorithm-review/</guid>
      <description>Algorithm course review Graph Algorithms Algorithm on Graphs  elementary graph algorithms  breadth-first search depth-first search minimum spanning tree  shortest path problem  single-source shortest path all-pairs shortest path  maximum flow  max-flow vs min-cut applications   DFS time complexity: O(|V|+|E|)</description>
    </item>
    
  </channel>
</rss>