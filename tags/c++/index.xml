<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C&#43;&#43; on Rentseen&#39;s Blog</title>
    <link>http://yelinsheng.top/tags/c&#43;&#43;/</link>
    <description>Recent content in C&#43;&#43; on Rentseen&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <copyright>Copyright &amp;copy; 叶林生 2016.</copyright>
    <lastBuildDate>Thu, 01 Sep 2016 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="http://yelinsheng.top/tags/c++/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>c&#43;&#43; multithreading学习</title>
      <link>http://yelinsheng.top/post/cplusplus-multithread/</link>
      <pubDate>Thu, 01 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>http://yelinsheng.top/post/cplusplus-multithread/</guid>
      <description>g++ compile g++ -std=c++11 launch-thread.cpp -o launch-thread -lpthread
basic thread management lanch a thread we can lanch a thread by passing a parameter which can be function, lamda expression and function call operator
#include&amp;lt;iostream&amp;gt; #include&amp;lt;thread&amp;gt; void helloWorld(){ std::cout&amp;lt;&amp;lt;&amp;quot;hello world from function&amp;quot;&amp;lt;&amp;lt;std::endl; } class hello{ public: void operator()(){ std::cout&amp;lt;&amp;lt;&amp;quot;hello world from function call operator&amp;quot;&amp;lt;&amp;lt;std::endl; } }; int main(){ std::thread testFunction(helloWorld); std::thread testLamda([]{ std::cout&amp;lt;&amp;lt;&amp;quot;hello world from lamda&amp;quot;&amp;lt;&amp;lt;std::endl; }); hello x; std::thread testCall(x); testFunction.</description>
    </item>
    
    <item>
      <title>c&#43;&#43;函数</title>
      <link>http://yelinsheng.top/post/cplusplus-functions/</link>
      <pubDate>Thu, 01 Sep 2016 00:00:00 +0000</pubDate>
      
      <guid>http://yelinsheng.top/post/cplusplus-functions/</guid>
      <description>function call operator 在class中加入operator()使类具有函数的特征
#include&amp;lt;iostream&amp;gt; class mul{ public: mul(int x){ multiplier=x; } int operator()(int x) const { return x*multiplier; } private: int multiplier; }; int main(){ mul test(10); std::cout&amp;lt;&amp;lt;test(2)&amp;lt;&amp;lt;std::endl; }  lamda expression [传入的变量列表](函数参数){函数体}(调用);
在[ ]中声明需要使用的调用体的域中的本地变量，全局变量不需要声明。[=]表示所有的变量以赋值的形式传入，[&amp;amp;]表示所有的变量以引用的形式传入，[=,&amp;amp;j]表示除j外都以赋值传入，[i,&amp;amp;j]，表示i以赋值传入，j以引用传入
第一个()为参数列表
{}中是函数体
第二个()表示调用
#include&amp;lt;iostream&amp;gt; int main(){ int x=1; double y=1.2; bool z=false; [x,&amp;amp;y](int i){std::cout&amp;lt;&amp;lt;i+x+y&amp;lt;&amp;lt;std::endl;}(1); return 0; }  accumulate 累加, demo 如下所示，可使用vector的迭代器
#include &amp;lt;iostream&amp;gt; #include &amp;lt;vector&amp;gt; #include &amp;lt;numeric&amp;gt; int main(){ int can[]={1,2,3,4}; int r=std::accumulate(can,can+4,0); std::cout&amp;lt;&amp;lt;r&amp;lt;&amp;lt;std::endl; return 0; }  distance 返回迭代器之间的距离，demo如下:</description>
    </item>
    
  </channel>
</rss>